{"ast":null,"code":"var Writable = require('readable-stream/writable');\n\nvar Readable = require('readable-stream/readable');\n\nvar Duplex = require('readable-stream/duplex');\n\nvar DUMMY = new Buffer(0);\n\nvar noop = function () {};\n\nvar toFunction = function (fn) {\n  if (typeof fn === 'function') return fn;\n  return function (cb) {\n    cb(null, fn);\n  };\n};\n\nvar onreadable = function (rs, init) {\n  var reading = false;\n  var destroyed = false;\n\n  rs._read = function () {\n    reading = true;\n  };\n\n  rs.destroy = function () {\n    destroyed = true;\n  };\n\n  init(function (err, source) {\n    if (err) return rs.emit('error', err);\n\n    var fwd = function () {\n      var data;\n\n      while ((data = source.read()) !== null) {\n        reading = false;\n        rs.push(data);\n      }\n    };\n\n    source.on('readable', function () {\n      if (reading) fwd();\n    });\n    source.on('end', function () {\n      fwd();\n      rs.push(null);\n    });\n    source.on('error', function (err) {\n      rs.emit('error', err);\n    });\n    source.on('close', function () {\n      fwd();\n      process.nextTick(function () {\n        rs.emit('close');\n      });\n    });\n\n    rs._read = function () {\n      reading = true;\n      fwd();\n    };\n\n    rs.destroy = function () {\n      if (destroyed) return;\n      destroyed = true;\n      if (source.destroy) source.destroy();\n    };\n\n    if (destroyed) {\n      destroyed = false;\n      rs.destroy();\n      return;\n    }\n\n    if (reading) fwd();\n  });\n  return rs;\n};\n\nvar onwritable = function (ws, init) {\n  var ready = noop;\n  var destroyed = false;\n\n  ws._write = function (data, enc, cb) {\n    ready = cb;\n  };\n\n  ws.destroy = function () {\n    destroyed = true;\n  };\n\n  ws.write(DUMMY);\n  init(function (err, source) {\n    if (err) return ws.emit('error', err);\n    source.on('close', function () {\n      ws.emit('close');\n    });\n    source.on('error', function (err) {\n      ws.emit('error', err);\n    });\n\n    ws._write = function (data, enc, cb) {\n      if (data === DUMMY) return cb();\n      source.write(data, enc, cb);\n    };\n\n    var emit = ws.emit;\n    source.on('finish', function () {\n      emit.call(ws, 'finish');\n    });\n\n    ws.destroy = function () {\n      if (destroyed) return;\n      destroyed = true;\n      if (source.destroy) source.destroy();\n    };\n\n    ws.emit = function (name) {\n      if (name !== 'finish') return emit.apply(ws, arguments);\n      source.end();\n    };\n\n    if (destroyed) {\n      destroyed = false;\n      ws.destroy();\n      return;\n    }\n\n    ready();\n  });\n  return ws;\n};\n\nexports.readable = function (opts, init) {\n  if (arguments.length === 1) return exports.readable(null, opts);\n  if (!opts) opts = {};\n  return onreadable(new Readable(opts), toFunction(init));\n};\n\nexports.writable = function (opts, init) {\n  if (arguments.length === 1) return exports.writable(null, opts);\n  if (!opts) opts = {};\n  return onwritable(new Writable(opts), toFunction(init));\n};\n\nexports.duplex = function (opts, initWritable, initReadable) {\n  if (arguments.length === 2) return exports.duplex(null, opts, initWritable);\n  if (!opts) opts = {};\n  var dupl = new Duplex(opts);\n  onwritable(dupl, toFunction(initWritable));\n  onreadable(dupl, toFunction(initReadable));\n  return dupl;\n};","map":null,"metadata":{},"sourceType":"script"}