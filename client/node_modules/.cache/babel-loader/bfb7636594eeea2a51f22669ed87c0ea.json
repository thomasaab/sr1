{"ast":null,"code":"/* Copyright (c) 2012-2014 LevelUP contributors\n * See list at <https://github.com/rvagg/node-levelup#contributing>\n * MIT License\n * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>\n */\nvar extend = require('xtend'),\n    LevelUPError = require('./errors').LevelUPError,\n    encodingNames = ['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le'],\n    defaultOptions = {\n  createIfMissing: true,\n  errorIfExists: false,\n  keyEncoding: 'utf8',\n  valueEncoding: 'utf8',\n  compression: true\n},\n    leveldown,\n    encodings = function () {\n  function isBinary(data) {\n    return data === undefined || data === null || Buffer.isBuffer(data);\n  }\n\n  var encodings = {};\n  encodings.utf8 = encodings['utf-8'] = {\n    encode: function (data) {\n      return isBinary(data) ? data : String(data);\n    },\n    decode: function (data) {\n      return data;\n    },\n    buffer: false,\n    type: 'utf8'\n  };\n  encodings.json = {\n    encode: JSON.stringify,\n    decode: JSON.parse,\n    buffer: false,\n    type: 'json'\n  };\n  encodingNames.forEach(function (type) {\n    if (encodings[type]) return;\n    encodings[type] = {\n      encode: function (data) {\n        return isBinary(data) ? data : new Buffer(data, type);\n      },\n      decode: function (buffer) {\n        return process.browser ? buffer.toString(type) : buffer;\n      },\n      buffer: true,\n      type: type // useful for debugging purposes\n\n    };\n  });\n  return encodings;\n}(),\n    encodingOpts = function () {\n  var eo = {};\n  encodingNames.forEach(function (e) {\n    eo[e] = {\n      valueEncoding: e\n    };\n  });\n  return eo;\n}();\n\nfunction copy(srcdb, dstdb, callback) {\n  srcdb.readStream().pipe(dstdb.writeStream()).on('close', callback ? callback : function () {}).on('error', callback ? callback : function (err) {\n    throw err;\n  });\n}\n\nfunction getOptions(levelup, options) {\n  var s = typeof options == 'string'; // just an encoding\n\n  if (!s && options && options.encoding && !options.valueEncoding) options.valueEncoding = options.encoding;\n  return extend(levelup && levelup.options || {}, s ? encodingOpts[options] || encodingOpts[defaultOptions.valueEncoding] : options);\n}\n\nfunction getLevelDOWN() {\n  if (leveldown) return leveldown;\n\n  var requiredVersion = require('../package.json').devDependencies.leveldown,\n      missingLevelDOWNError = 'Could not locate LevelDOWN, try `npm install leveldown`',\n      leveldownVersion;\n\n  try {\n    leveldownVersion = require('leveldown/package').version;\n  } catch (e) {\n    throw new LevelUPError(missingLevelDOWNError);\n  }\n\n  if (!require('semver').satisfies(leveldownVersion, requiredVersion)) {\n    throw new LevelUPError('Installed version of LevelDOWN (' + leveldownVersion + ') does not match required version (' + requiredVersion + ')');\n  }\n\n  try {\n    return leveldown = require('leveldown');\n  } catch (e) {\n    throw new LevelUPError(missingLevelDOWNError);\n  }\n}\n\nfunction dispatchError(levelup, error, callback) {\n  return typeof callback == 'function' ? callback(error) : levelup.emit('error', error);\n}\n\nfunction getKeyEncoder(options, op) {\n  var type = op && op.keyEncoding || options.keyEncoding || 'utf8';\n  return encodings[type] || type;\n}\n\nfunction getValueEncoder(options, op) {\n  var type = op && (op.valueEncoding || op.encoding) || options.valueEncoding || options.encoding || 'utf8';\n  return encodings[type] || type;\n}\n\nfunction encodeKey(key, options, op) {\n  return getKeyEncoder(options, op).encode(key);\n}\n\nfunction encodeValue(value, options, op) {\n  return getValueEncoder(options, op).encode(value);\n}\n\nfunction decodeKey(key, options) {\n  return getKeyEncoder(options).decode(key);\n}\n\nfunction decodeValue(value, options) {\n  return getValueEncoder(options).decode(value);\n}\n\nfunction isValueAsBuffer(options, op) {\n  return getValueEncoder(options, op).buffer;\n}\n\nfunction isKeyAsBuffer(options, op) {\n  return getKeyEncoder(options, op).buffer;\n}\n\nmodule.exports = {\n  defaultOptions: defaultOptions,\n  copy: copy,\n  getOptions: getOptions,\n  getLevelDOWN: getLevelDOWN,\n  dispatchError: dispatchError,\n  encodeKey: encodeKey,\n  encodeValue: encodeValue,\n  isValueAsBuffer: isValueAsBuffer,\n  isKeyAsBuffer: isKeyAsBuffer,\n  decodeValue: decodeValue,\n  decodeKey: decodeKey\n};","map":null,"metadata":{},"sourceType":"script"}