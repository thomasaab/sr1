{"ast":null,"code":"var path = require('path');\n\nvar once = require('once');\n\nvar concat = require('concat-stream');\n\nvar octal = require('octal');\n\nvar stat = require('./stat');\n\nvar xtend = require('xtend');\n\nvar errno = require('./errno');\n\nvar ROOT = stat({\n  type: 'directory',\n  mode: octal(777),\n  size: 4096\n});\n\nvar normalize = function (key) {\n  key = key[0] === '/' ? key : '/' + key;\n  key = path.normalize(key);\n  if (key === '/') return key;\n  return key[key.length - 1] === '/' ? key.slice(0, -1) : key;\n};\n\nvar prefix = function (key) {\n  var depth = key.split('/').length.toString(36);\n  return '0000000000'.slice(depth.length) + depth + key;\n};\n\nmodule.exports = function (db) {\n  var that = {};\n  that.normalize = normalize;\n\n  that.get = function (key, cb) {\n    key = normalize(key);\n    if (key === '/') return process.nextTick(cb.bind(null, null, ROOT, '/'));\n    db.get(prefix(key), {\n      valueEncoding: 'json'\n    }, function (err, doc) {\n      if (err && err.notFound) return cb(errno.ENOENT(key), null, key);\n      if (err) return cb(err, null, key);\n      cb(null, stat(doc), key);\n    });\n  };\n\n  that.writable = function (key, cb) {\n    key = normalize(key);\n    if (key === '/') return process.nextTick(cb.bind(null, errno.EPERM(key)));\n    that.follow(path.dirname(key), function (err, parent) {\n      if (err) return cb(err);\n      if (!parent.isDirectory()) return cb(errno.ENOTDIR(key));\n      cb(null, key);\n    });\n  };\n\n  that.list = function (key, cb) {\n    key = normalize(key);\n    var start = prefix(key === '/' ? key : key + '/');\n    var keys = db.createKeyStream({\n      start: start,\n      end: start + '\\xff'\n    });\n    cb = once(cb);\n    keys.on('error', cb);\n    keys.pipe(concat({\n      encoding: 'object'\n    }, function (files) {\n      files = files.map(function (file) {\n        return file.split('/').pop();\n      });\n      cb(null, files);\n    }));\n  };\n\n  var resolve = function (dir, cb) {\n    var root = '/';\n    var parts = dir.split('/').slice(1);\n\n    var loop = function () {\n      that.get(path.join(root, parts.shift()), function (err, doc, key) {\n        if (err) return cb(err, doc, dir);\n        root = doc.target || key;\n        if (!parts.length) return cb(null, doc, key);\n        loop();\n      });\n    };\n\n    loop();\n  };\n\n  that.follow = function (key, cb) {\n    resolve(normalize(key), function loop(err, doc, key) {\n      if (err) return cb(err, null, key);\n      if (doc.target) return that.get(doc.target, loop);\n      cb(null, stat(doc), key);\n    });\n  };\n\n  that.update = function (key, opts, cb) {\n    that.get(key, function (err, doc, key) {\n      if (err) return cb(err);\n      if (key === '/') return cb(errno.EPERM(key));\n      that.put(key, xtend(doc, opts), cb);\n    });\n  };\n\n  that.put = function (key, opts, cb) {\n    that.writable(key, function (err, key) {\n      if (err) return cb(err);\n      db.put(prefix(key), stat(opts), {\n        valueEncoding: 'json'\n      }, cb);\n    });\n  };\n\n  that.del = function (key, cb) {\n    key = normalize(key);\n    if (key === '/') return process.nextTick(cb.bind(null, errno.EPERM(key)));\n    db.del(prefix(key), cb);\n  };\n\n  return that;\n};","map":null,"metadata":{},"sourceType":"script"}