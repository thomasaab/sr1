{"ast":null,"code":"var util = require('util'),\n    AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nfunction DeferredLevelDOWN(location) {\n  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : ''); // optional location, who cares?\n\n  this._db = undefined;\n  this._operations = [];\n}\n\nutil.inherits(DeferredLevelDOWN, AbstractLevelDOWN); // called by LevelUP when we have a real DB to take its place\n\nDeferredLevelDOWN.prototype.setDb = function (db) {\n  this._db = db;\n\n  this._operations.forEach(function (op) {\n    db[op.method].apply(db, op.args);\n  });\n};\n\nDeferredLevelDOWN.prototype._open = function (options, callback) {\n  return process.nextTick(callback);\n}; // queue a new deferred operation\n\n\nDeferredLevelDOWN.prototype._operation = function (method, args) {\n  if (this._db) return this._db[method].apply(this._db, args);\n\n  this._operations.push({\n    method: method,\n    args: args\n  });\n}; // deferrables\n\n\n'put get del batch approximateSize'.split(' ').forEach(function (m) {\n  DeferredLevelDOWN.prototype['_' + m] = function () {\n    this._operation(m, arguments);\n  };\n});\n\nDeferredLevelDOWN.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj);\n}; // don't need to implement this as LevelUP's ReadStream checks for 'ready' state\n\n\nDeferredLevelDOWN.prototype._iterator = function () {\n  throw new TypeError('not implemented');\n};\n\nmodule.exports = DeferredLevelDOWN;","map":null,"metadata":{},"sourceType":"script"}