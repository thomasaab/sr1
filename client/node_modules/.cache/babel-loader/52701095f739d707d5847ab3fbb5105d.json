{"ast":null,"code":"/* Copyright (c) 2012-2014 LevelUP contributors\n * See list at <https://github.com/rvagg/node-levelup#contributing>\n * MIT License\n * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>\n */\nvar Stream = require('stream').Stream,\n    inherits = require('util').inherits,\n    extend = require('xtend'),\n    bl = require('bl'),\n    setImmediate = global.setImmediate || process.nextTick,\n    getOptions = require('./util').getOptions,\n    defaultOptions = {\n  type: 'put'\n};\n\nfunction WriteStream(options, db) {\n  if (!(this instanceof WriteStream)) return new WriteStream(options, db);\n  Stream.call(this);\n  this._options = extend(defaultOptions, getOptions(db, options));\n  this._db = db;\n  this._buffer = [];\n  this._status = 'init';\n  this._end = false;\n  this.writable = true;\n  this.readable = false;\n\n  var self = this,\n      ready = function () {\n    if (!self.writable) return;\n    self._status = 'ready';\n    self.emit('ready');\n\n    self._process();\n  };\n\n  if (db.isOpen()) setImmediate(ready);else db.once('ready', ready);\n}\n\ninherits(WriteStream, Stream);\n\nWriteStream.prototype.write = function (data) {\n  if (!this.writable) return false;\n\n  this._buffer.push(data);\n\n  if (this._status != 'init') this._processDelayed();\n\n  if (this._options.maxBufferLength && this._buffer.length > this._options.maxBufferLength) {\n    this._writeBlock = true;\n    return false;\n  }\n\n  return true;\n};\n\nWriteStream.prototype.end = function (data) {\n  var self = this;\n  if (data) this.write(data);\n  setImmediate(function () {\n    self._end = true;\n\n    self._process();\n  });\n};\n\nWriteStream.prototype.destroy = function () {\n  this.writable = false;\n  this.end();\n};\n\nWriteStream.prototype.destroySoon = function () {\n  this.end();\n};\n\nWriteStream.prototype.add = function (entry) {\n  if (!entry.props) return;\n  if (entry.props.Directory) entry.pipe(this._db.writeStream(this._options));else if (entry.props.File || entry.File || entry.type == 'File') this._write(entry);\n  return true;\n};\n\nWriteStream.prototype._processDelayed = function () {\n  var self = this;\n  setImmediate(function () {\n    self._process();\n  });\n};\n\nWriteStream.prototype._process = function () {\n  var buffer,\n      self = this,\n      cb = function (err) {\n    if (!self.writable) return;\n    if (self._status != 'closed') self._status = 'ready';\n\n    if (err) {\n      self.writable = false;\n      return self.emit('error', err);\n    }\n\n    self._process();\n  };\n\n  if (self._status != 'ready' && self.writable) {\n    if (self._buffer.length && self._status != 'closed') self._processDelayed();\n    return;\n  }\n\n  if (self._buffer.length && self.writable) {\n    self._status = 'writing';\n    buffer = self._buffer;\n    self._buffer = [];\n\n    self._db.batch(buffer.map(function (d) {\n      return {\n        type: d.type || self._options.type,\n        key: d.key,\n        value: d.value,\n        keyEncoding: d.keyEncoding || self._options.keyEncoding,\n        valueEncoding: d.valueEncoding || d.encoding || self._options.valueEncoding\n      };\n    }), cb);\n\n    if (self._writeBlock) {\n      self._writeBlock = false;\n      self.emit('drain');\n    } // don't allow close until callback has returned\n\n\n    return;\n  }\n\n  if (self._end && self._status != 'closed') {\n    self._status = 'closed';\n    self.writable = false;\n    self.emit('close');\n  }\n};\n\nWriteStream.prototype._write = function (entry) {\n  var key = entry.path || entry.props.path,\n      self = this;\n  if (!key) return;\n  entry.pipe(bl(function (err, data) {\n    if (err) {\n      self.writable = false;\n      return self.emit('error', err);\n    }\n\n    if (self._options.fstreamRoot && key.indexOf(self._options.fstreamRoot) > -1) key = key.substr(self._options.fstreamRoot.length + 1);\n    self.write({\n      key: key,\n      value: data.slice(0)\n    });\n  }));\n};\n\nWriteStream.prototype.toString = function () {\n  return 'LevelUP.WriteStream';\n};\n\nmodule.exports = WriteStream;","map":null,"metadata":{},"sourceType":"script"}