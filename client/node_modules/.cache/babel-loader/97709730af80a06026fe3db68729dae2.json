{"ast":null,"code":"//force to a valid range\nvar range = exports.range = function (obj) {\n  return null == obj ? {} : 'string' === typeof range ? {\n    min: range,\n    max: range + '\\xff'\n  } : obj;\n}; //turn into a sub range.\n\n\nvar prefix = exports.prefix = function (range, within, term) {\n  range = exports.range(range);\n  var _range = {};\n  term = term || '\\xff';\n\n  if (range instanceof RegExp || 'function' == typeof range) {\n    _range.min = within;\n    _range.max = within + term, _range.inner = function (k) {\n      var j = k.substring(within.length);\n      if (range.test) return range.test(j);\n      return range(j);\n    };\n  } else if ('object' === typeof range) {\n    _range.min = within + (range.min || range.start || '');\n    _range.max = within + (range.max || range.end || term || '~');\n    _range.reverse = !!range.reverse;\n  }\n\n  return _range;\n}; //return a function that checks a range\n\n\nvar checker = exports.checker = function (range) {\n  if (!range) range = {};\n  if ('string' === typeof range) return function (key) {\n    return key.indexOf(range) == 0;\n  };else if (range instanceof RegExp) return function (key) {\n    return range.test(key);\n  };else if ('object' === typeof range) return function (key) {\n    var min = range.min || range.start;\n    var max = range.max || range.end; // fixes keys passed as ints from sublevels\n\n    key = String(key);\n    return (!min || key >= min) && (!max || key <= max) && (!range.inner || (range.inner.test ? range.inner.test(key) : range.inner(key)));\n  };else if ('function' === typeof range) return range;\n}; //check if a key is within a range.\n\n\nvar satifies = exports.satisfies = function (key, range) {\n  return checker(range)(key);\n};","map":null,"metadata":{},"sourceType":"script"}