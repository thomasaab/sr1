{"ast":null,"code":"var _jsxFileName = \"/home/thomas/Desktop/server_proyecto1_sr/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n\n    this.clickInLoad = () => {\n      document.getElementById(\"inputUpload\").click();\n      let UpdFile = document.getElementById(\"inputUpload\");\n      UpdFile.addEventListener('change', this.handleFileSelect, false);\n    };\n\n    this.handleFileChosen = file => {\n      fileReader = new FileReader();\n\n      fileReader.onloadend = function (e) {\n        const content = fileReader.result;\n        console.log(\"cont\", content);\n      };\n\n      fileReader.readAsText(file);\n    };\n\n    this.handleFileSelect = evt => {\n      if (evt.target.files.length > 0) {\n        var files = evt.target.files; // FileList object\n        // Loop through the FileList and render image files as thumbnails.\n\n        for (var i = 0; i < files.length; i++) {\n          console.log(\"f\", files[i]);\n          this.handleFileChosen(files[i]);\n          var reader = new FileReader();\n          console.log(reader);\n          var formData = new FormData();\n          formData.append('files', files[i]);\n          console.log(formData);\n\n          reader.onloadend = function () {\n            console.log(\"hola\");\n            var arrayBuffer = this.result,\n                array = new Uint8Array(arrayBuffer),\n                binaryString = String.fromCharCode.apply(null, array);\n            console.log(\"array\", array);\n            console.log(\"binary\", binaryString);\n          };\n        }\n      }\n    };\n\n    this.callApi = async () => {\n      const response = await fetch('/api/hello');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/world', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          post: this.state.post\n        })\n      });\n      const body = await response.text();\n      this.setState({\n        responseToPost: body\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Edit \", React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n      className: \"App-link\",\n      href: \"https://reactjs.org\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Learn React\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.response), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Post to Server:\")), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.post,\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.responseToPost), React.createElement(Button, {\n      onClick: this.clickInLoad,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"primary\"), ' ', React.createElement(\"input\", {\n      type: \"file\",\n      id: \"inputUpload\",\n      name: \"files[]\",\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/thomas/Desktop/server_proyecto1_sr/client/src/App.js"],"names":["React","Component","Button","App","state","response","post","responseToPost","clickInLoad","document","getElementById","click","UpdFile","addEventListener","handleFileSelect","handleFileChosen","file","fileReader","FileReader","onloadend","e","content","result","console","log","readAsText","evt","target","files","length","i","reader","formData","FormData","append","arrayBuffer","array","Uint8Array","binaryString","String","fromCharCode","apply","callApi","fetch","body","json","status","Error","message","handleSubmit","preventDefault","method","headers","JSON","stringify","text","setState","componentDidMount","then","res","express","catch","err","render","logo","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\n\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  clickInLoad = () => {\n    document.getElementById(\"inputUpload\").click();\n    let UpdFile = document.getElementById(\"inputUpload\");\n    UpdFile.addEventListener('change',this.handleFileSelect, false);\n  }\n  \n  handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = function (e){\n      const content = fileReader.result;\n      console.log(\"cont\", content);\n    }\n    fileReader.readAsText(file);\n  }\n\n  handleFileSelect = (evt) => {\n    if(evt.target.files.length>0){\n      var files = evt.target.files; // FileList object\n\n    // Loop through the FileList and render image files as thumbnails.\n    for (var i = 0;i<files.length; i++) {\n      console.log(\"f\",files[i]);\n\n      this.handleFileChosen(files[i]);\n\n      var reader = new FileReader();\n      console.log(reader);\n      var formData = new FormData();\n      formData.append('files',files[i]);\n      console.log(formData);\n      reader.onloadend = function() {\n        console.log(\"hola\");\n        var arrayBuffer = this.result,\n        array = new Uint8Array(arrayBuffer),\n        binaryString = String.fromCharCode.apply(null, array);\n        console.log(\"array\",array);\n        console.log(\"binary\",binaryString);\n      }\n    }\n    }\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n\n      {/* file */}\n      <Button onClick={this.clickInLoad} color=\"primary\">primary</Button>{' '}\n      <input type=\"file\" id=\"inputUpload\" name=\"files[]\" multiple/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}