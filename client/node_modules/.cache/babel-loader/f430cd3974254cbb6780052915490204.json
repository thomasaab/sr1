{"ast":null,"code":"var _jsxFileName = \"/home/thomas/Desktop/sr1/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nlet aes256 = require('aes256');\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n\n    this.clickInLoad = () => {\n      document.getElementById(\"inputUpload\").click();\n      let UpdFile = document.getElementById(\"inputUpload\");\n      UpdFile.addEventListener('change', this.handleFileSelect, false);\n    };\n\n    this.handleFileChosen = file => {\n      let fileReader = new FileReader();\n\n      fileReader.onloadend = function (e) {\n        var content = fileReader.result;\n        /* encrypt */\n\n        var key = \"my passphrase;\";\n        var contentEncrypted = aes256.encrypt(key, content);\n        var nameEncrypted = aes256.encrypt(key, file.name); //nameEncrypted = nameEncrypted.toString().replace(\":\", \"\\/\");\n        //\n\n        /* create file encrypt */\n\n        var fileEncrypted = new File([contentEncrypted], nameEncrypted);\n        console.log(\"fileEncrypted\", fileEncrypted);\n        var formData = new FormData(); //formData.set('files', files);\n\n        formData.append('files', fileEncrypted);\n        fetch('api/file', {\n          // Your POST endpoint\n          method: 'POST',\n          body: formData // This is your file object\n\n        }).catch(function () {\n          console.log(\"error in post data\");\n        });\n      };\n\n      fileReader.readAsText(file);\n    };\n\n    this.callFile = async () => {\n      const response = await fetch('/api/getFile');\n      const body = await response.blob();\n      if (response.status !== 200) throw Error(body.message);\n      let key = \"my passphrase;\";\n      let fileReader = new FileReader();\n\n      fileReader.onloadend = function (e) {\n        var content = aes256.decrypt(key, fileReader.result);\n        var filename = \"hola.odt\";\n        console.log(content);\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n      };\n\n      fileReader.readAsText(body);\n    };\n\n    this.download = (filename, text) => {\n      var element = document.createElement('a');\n      element.setAttribute('href', encodeURIComponent(text));\n      element.setAttribute('download', filename);\n      element.style.display = 'none';\n      document.body.appendChild(element);\n      element.click();\n      document.body.removeChild(element);\n    };\n\n    this.handleFileSelect = evt => {\n      if (evt.target.files.length > 0) {\n        var files = evt.target.files; // FileList object\n        // Loop through the FileList and render image files as thumbnails.\n\n        for (var i = 0; i < files.length; i++) {\n          this.handleFileChosen(files[i]);\n        }\n      }\n    };\n\n    this.callApi = async () => {\n      const response = await fetch('/api/hello');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/world', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          post: this.state.post\n        })\n      });\n      const body = await response.text();\n      this.setState({\n        responseToPost: body\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Edit \", React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n      className: \"App-link\",\n      href: \"https://reactjs.org\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Learn React\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.response), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Post to Server:\")), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.post,\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.responseToPost), React.createElement(Button, {\n      onClick: this.clickInLoad,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"primary\"), ' ', React.createElement(\"input\", {\n      type: \"file\",\n      id: \"inputUpload\",\n      name: \"files[]\",\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.callFile,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"call file\"), ' ');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/thomas/Desktop/sr1/client/src/App.js"],"names":["React","Component","Button","aes256","require","App","state","response","post","responseToPost","clickInLoad","document","getElementById","click","UpdFile","addEventListener","handleFileSelect","handleFileChosen","file","fileReader","FileReader","onloadend","e","content","result","key","contentEncrypted","encrypt","nameEncrypted","name","fileEncrypted","File","console","log","formData","FormData","append","fetch","method","body","catch","readAsText","callFile","blob","status","Error","message","decrypt","filename","element","createElement","setAttribute","encodeURIComponent","style","display","appendChild","removeChild","download","text","evt","target","files","length","i","callApi","json","handleSubmit","preventDefault","headers","JSON","stringify","setState","componentDidMount","then","res","express","err","render","logo","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\n\nimport logo from './logo.svg';\nimport './App.css';\nlet aes256 = require('aes256');\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: ''\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  clickInLoad = () => {\n    document.getElementById(\"inputUpload\").click();\n    let UpdFile = document.getElementById(\"inputUpload\");\n    UpdFile.addEventListener('change',this.handleFileSelect, false);\n  }\n  \n  handleFileChosen = (file) => {\n    let fileReader = new FileReader();\n    fileReader.onloadend = function (e){\n      var content = fileReader.result;\n\n      /* encrypt */\n      var key = \"my passphrase;\"\n      var contentEncrypted = aes256.encrypt(key, content);\n      var nameEncrypted = aes256.encrypt(key, file.name);\n      //nameEncrypted = nameEncrypted.toString().replace(\":\", \"\\/\");\n      //\n      /* create file encrypt */\n      var fileEncrypted = new File([contentEncrypted], nameEncrypted);\n      console.log(\"fileEncrypted\",fileEncrypted);\n      var formData = new FormData();\n      //formData.set('files', files);\n      formData.append('files', fileEncrypted);\n      fetch('api/file', { // Your POST endpoint\n        method: 'POST',\n        body: formData // This is your file object\n      })\n      .catch(function() {\n        console.log(\"error in post data\");\n      });\n    }\n    fileReader.readAsText(file);\n  }\n\n   callFile = async () => {\n    const response = await fetch('/api/getFile');\n    const body = await response.blob();\n    if (response.status !== 200) throw Error(body.message);\n    let key = \"my passphrase;\"\n    let fileReader = new FileReader();\n    fileReader.onloadend = function (e){\n      var content = aes256.decrypt(key,fileReader.result);\n      var filename = \"hola.odt\";\n      console.log(content);\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n      }\n    fileReader.readAsText(body);\n  };\n\n  download = (filename, text) => {\n    var element = document.createElement('a');\n    element.setAttribute('href', encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\n  handleFileSelect = (evt) => {\n    if(evt.target.files.length>0){\n      var files = evt.target.files; // FileList object\n\n      // Loop through the FileList and render image files as thumbnails.\n      for (var i = 0;i<files.length; i++) {\n        this.handleFileChosen(files[i])\n      }\n    }\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n\n      {/* file */}\n      <Button onClick={this.clickInLoad} color=\"primary\">primary</Button>{' '}\n      <input type=\"file\" id=\"inputUpload\" name=\"files[]\" multiple/> \n\n      <Button onClick={this.callFile} color=\"primary\">call file</Button>{' '}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}