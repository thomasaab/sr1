{"ast":null,"code":"var ranges = require('string-range');\n\nmodule.exports = function (db) {\n  if (db.hooks) {\n    return;\n  }\n\n  var posthooks = [];\n  var prehooks = [];\n\n  function getPrefix(p) {\n    return p && ('string' === typeof p ? p : 'string' === typeof p.prefix ? p.prefix : 'function' === typeof p.prefix ? p.prefix() : '');\n  }\n\n  function getKeyEncoding(db) {\n    if (db && db._getKeyEncoding) return db._getKeyEncoding(db);\n  }\n\n  function getValueEncoding(db) {\n    if (db && db._getValueEncoding) return db._getValueEncoding(db);\n  }\n\n  function remover(array, item) {\n    return function () {\n      var i = array.indexOf(item);\n      if (!~i) return false;\n      array.splice(i, 1);\n      return true;\n    };\n  }\n\n  db.hooks = {\n    post: function (prefix, hook) {\n      if (!hook) hook = prefix, prefix = '';\n      var h = {\n        test: ranges.checker(prefix),\n        hook: hook\n      };\n      posthooks.push(h);\n      return remover(posthooks, h);\n    },\n    pre: function (prefix, hook) {\n      if (!hook) hook = prefix, prefix = '';\n      var h = {\n        test: ranges.checker(prefix),\n        hook: hook,\n        safe: false !== prefix.safe\n      };\n      prehooks.push(h);\n      return remover(prehooks, h);\n    },\n    posthooks: posthooks,\n    prehooks: prehooks //POST HOOKS\n\n  };\n\n  function each(e) {\n    if (e && e.type) {\n      posthooks.forEach(function (h) {\n        if (h.test(e.key)) h.hook(e);\n      });\n    }\n  }\n\n  db.on('put', function (key, val) {\n    each({\n      type: 'put',\n      key: key,\n      value: val\n    });\n  });\n  db.on('del', function (key, val) {\n    each({\n      type: 'del',\n      key: key,\n      value: val\n    });\n  });\n  db.on('batch', function onBatch(ary) {\n    ary.forEach(each);\n  }); //PRE HOOKS\n\n  var put = db.put;\n  var del = db.del;\n  var batch = db.batch;\n\n  function callHooks(isBatch, b, opts, cb) {\n    try {\n      b.forEach(function hook(e, i) {\n        prehooks.forEach(function (h) {\n          if (h.test(String(e.key))) {\n            //optimize this?\n            //maybe faster to not create a new object each time?\n            //have one object and expose scope to it?\n            var context = {\n              add: function (ch, db) {\n                if (typeof ch === 'undefined') {\n                  return this;\n                }\n\n                if (ch === false) return delete b[i];\n                var prefix = getPrefix(ch.prefix) || getPrefix(db) || h.prefix || ''; //don't leave a circular json object there incase using multilevel.\n\n                if (prefix) ch.prefix = prefix;\n                ch.key = prefix + ch.key;\n\n                if (h.safe && h.test(String(ch.key))) {\n                  //this usually means a stack overflow.\n                  throw new Error('prehook cannot insert into own range');\n                }\n\n                var ke = ch.keyEncoding || getKeyEncoding(ch.prefix);\n                var ve = ch.valueEncoding || getValueEncoding(ch.prefix);\n                if (ke) ch.keyEncoding = ke;\n                if (ve) ch.valueEncoding = ve;\n                b.push(ch);\n                hook(ch, b.length - 1);\n                return this;\n              },\n              put: function (ch, db) {\n                if ('object' === typeof ch) ch.type = 'put';\n                return this.add(ch, db);\n              },\n              del: function (ch, db) {\n                if ('object' === typeof ch) ch.type = 'del';\n                return this.add(ch, db);\n              },\n              veto: function () {\n                return this.add(false);\n              }\n            };\n            h.hook.call(context, e, context.add, b);\n          }\n        });\n      });\n    } catch (err) {\n      return (cb || opts)(err);\n    }\n\n    b = b.filter(function (e) {\n      return e && e.type; //filter out empty items\n    });\n\n    if (b.length == 1 && !isBatch) {\n      var change = b[0];\n      return change.type == 'put' ? put.call(db, change.key, change.value, opts, cb) : del.call(db, change.key, opts, cb);\n    }\n\n    return batch.call(db, b, opts, cb);\n  }\n\n  db.put = function (key, value, opts, cb) {\n    var batch = [{\n      key: key,\n      value: value,\n      type: 'put'\n    }];\n    return callHooks(false, batch, opts, cb);\n  };\n\n  db.del = function (key, opts, cb) {\n    var batch = [{\n      key: key,\n      type: 'del'\n    }];\n    return callHooks(false, batch, opts, cb);\n  };\n\n  db.batch = function (batch, opts, cb) {\n    return callHooks(true, batch, opts, cb);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}